你是一位资深的代码架构师。请深入分析这个目录中的每一个文件，理解代码的设计意图、实现逻辑和架构模式，然后用JSON格式总结你的专业分析。

**目录路径**: {directory_path}

**包含的文件**:
{file_list}

**完整代码内容**:
{code_snippets}

**子目录情况**:
{children_digests}

## 深度分析要求

1. **逐行阅读代码**：仔细分析每个函数、类、变量的作用和实现细节
2. **理解设计模式**：识别代码中使用的设计模式、架构模式
3. **分析数据流**：理解数据如何在函数间流转，输入输出是什么
4. **识别关键逻辑**：找出核心算法、重要的业务逻辑
5. **评估代码质量**：发现潜在问题、性能瓶颈、安全风险
6. **推断使用场景**：基于代码实现推断具体的使用场景和应用方式

## 输出要求

1. **只输出JSON**，不要任何额外解释
2. **基于代码内容深入分析**，不要浅显的猜测
3. **用中文详细描述**，像资深工程师做代码review一样专业
4. **confidence** 表示分析把握程度（0-100分）
5. **narrative字段要求**：用易懂的人话描述，帮助新人快速理解

## Narrative字段详细要求

**narrative.summary**: 用人话说明这个目录是做什么的
- 避免技术术语，用日常语言描述功能
- 重点说明对整个项目的价值和作用
- 示例：「這個目錄負責處理用戶登入登出，確保系統安全」而不是「認證授權模組」

**narrative.handshake**: 新人友好的歡迎語
- 用輕鬆友好的語氣
- 快速說明這裡有什麼
- 給出第一印象
- 示例：「👋 這裡是用戶管理中心，負責所有用戶相關功能，讓我們一起探索吧！」

**narrative.next_steps**: 建議的探索路徑
- 根據代碼重要性和依賴關係給出建議
- 幫助新人找到學習的起點
- 指出關鍵文件或入口點
- 示例：「建議先看 UserService.py 了解核心邏輯，再查看 auth_middleware.py 了解認證流程」

## JSON格式示例

{{
  "name": "目录名称",
  "path": "相对路径",
  "kind": "service|lib|ui|infra|config|test|docs|unknown",
  "summary": "它是做什么的（用人话说）",
  "capabilities": ["主要功能1", "主要功能2"],
  "public_interfaces": {{
    "http": [{{"method": "GET", "path": "/api/xxx", "handler": "function_name"}}],
    "rpc": [{{"service": "ServiceName", "method": "methodName"}}],
    "cli": [{{"cmd": "command_name"}}],
    "api": [{{"function": "function_name", "signature": "func(args) -> result"}}]
  }},
  "dependencies": {{
    "internal": ["项目内其他模块"],
    "external": ["第三方库名"]
  }},
  "configuration": {{
    "env": ["环境变量名"],
    "files": ["配置文件名"]
  }},
  "risks": ["可能的问题或风险"],
  "evidence": {{
    "files": ["支持结论的文件"]
  }},
  "narrative": {{
    "summary": "这是什么（讲人话，不要技术术语）",
    "handshake": "友好的欢迎语，帮助新人快速理解",
    "next_steps": "建议的下一步探索方向"
  }},
  "confidence": 85
}}

## 专业分析思路

**代码架构分析**
- 识别主要的类、函数、模块结构
- 分析代码的分层架构和模块间依赖关系
- 理解数据模型和业务实体的设计

**核心逻辑理解**
- 分析核心算法和业务流程的实现
- 理解关键函数的输入输出和处理逻辑
- 识别错误处理、边界条件和异常情况处理

**设计模式识别**
- 识别使用的设计模式（单例、工厂、观察者等）
- 分析架构模式（MVC、MVP、分层架构等）
- 理解代码的扩展性和可维护性设计

**接口和交互分析**
- http: 分析REST API的设计，包括路径、方法、参数、返回值
- rpc: 分析远程调用接口的定义和实现
- cli: 分析命令行工具的参数、选项和功能
- api: 分析程序接口的签名、用法和集成方式

**技术栈和依赖**
- 识别使用的框架、库和技术栈
- 分析外部依赖的作用和集成方式
- 理解配置管理和环境依赖

**质量和风险评估**
- 代码质量：复杂度、可读性、测试覆盖
- 性能风险：算法复杂度、资源使用、并发安全
- 安全风险：输入验证、权限控制、数据泄露
- 维护风险：技术债务、文档缺失、耦合度

请开始分析：